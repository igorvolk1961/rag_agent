"""
Command Line Interface for RAG Agent
"""

import sys
import logging
from pathlib import Path
from typing import List, Optional
import click
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Prompt, Confirm

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent))

from config.settings import Settings
from core.rag_engine import RAGEngine
from core.document_processor import DocumentProcessor
from utils.logging_utils import setup_logging


console = Console()


@click.group()
@click.option('--verbose', '-v', is_flag=True, help='–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
@click.option('--config', '-c', type=click.Path(exists=True), help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
@click.pass_context
def cli(ctx, verbose, config):
    """RAG Agent - –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    ctx.ensure_object(dict)
    ctx.obj['verbose'] = verbose
    ctx.obj['config'] = config

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if verbose:
        setup_logging(level=logging.DEBUG)
    else:
        setup_logging(level=logging.INFO)


@cli.command()
@click.option('--file', '-f', 'files', multiple=True, help='–§–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
@click.option('--directory', '-d', type=click.Path(exists=True), help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏')
@click.option('--recursive', '-r', is_flag=True, help='–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏')
@click.pass_context
def add_documents(ctx, files, directory, recursive):
    """–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ RAG —Å–∏—Å—Ç–µ–º—É"""
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...", total=None)

            # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings = Settings()
            rag_engine = RAGEngine(settings)
            document_processor = DocumentProcessor(settings)

            progress.update(task, description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")

            # –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            files_to_process = []

            if files:
                files_to_process.extend(files)

            if directory:
                dir_path = Path(directory)
                if recursive:
                    pattern = "**/*"
                else:
                    pattern = "*"

                for file_path in dir_path.glob(pattern):
                    if file_path.is_file() and document_processor.is_supported_file(str(file_path)):
                        files_to_process.append(str(file_path))

            if not files_to_process:
                console.print("[red]–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏[/red]")
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
            total_files = len(files_to_process)
            progress.update(task, total=total_files, description=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {total_files} —Ñ–∞–π–ª–æ–≤...")

            processed_count = 0
            for file_path in files_to_process:
                try:
                    progress.update(task, description=f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {Path(file_path).name}")

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    chunks = document_processor.process_and_chunk(file_path)
                    if chunks:
                        rag_engine.add_documents(chunks)
                        processed_count += 1

                    progress.advance(task)

                except Exception as e:
                    console.print(f"[yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}[/yellow]")
                    progress.advance(task)

            progress.update(task, description="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.print(f"\n[green]‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {total_files} —Ñ–∞–π–ª–æ–≤[/green]")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = rag_engine.get_stats()
        table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")

        table.add_row("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤", str(stats.get('documents', 0)))
        table.add_row("–ß–∞–Ω–∫–æ–≤", str(stats.get('chunks', 0)))
        table.add_row("–†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", str(stats.get('vector_store_size', 0)))

        console.print(table)

    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        if ctx.obj['verbose']:
            console.print_exception()


@cli.command()
@click.argument('query', nargs=-1)
@click.option('--interactive', '-i', is_flag=True, help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
@click.option('--stream', '-s', is_flag=True, help='–ü–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞')
@click.pass_context
def query(ctx, query, interactive, stream):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å RAG —Å–∏—Å—Ç–µ–º–µ"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        settings = Settings()
        rag_engine = RAGEngine(settings)

        if interactive:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            console.print(Panel.fit(
                "[bold blue]RAG Agent - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º[/bold blue]\n"
                "–í–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞",
                title="ü§ñ RAG Agent"
            ))

            while True:
                user_query = Prompt.ask("\n[cyan]–í–∞—à –≤–æ–ø—Ä–æ—Å[/cyan]")

                if user_query.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    console.print("[yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]")
                    break

                if not user_query.strip():
                    continue

                try:
                    if stream:
                        console.print("[blue]–û—Ç–≤–µ—Ç:[/blue]")
                        for chunk in rag_engine.stream_query(user_query):
                            console.print(chunk, end="")
                        console.print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                    else:
                        with Progress(
                            SpinnerColumn(),
                            TextColumn("[progress.description]{task.description}"),
                            console=console
                        ) as progress:
                            task = progress.add_task("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", total=None)
                            answer = rag_engine.query(user_query)
                            progress.stop()

                        console.print(f"[blue]–û—Ç–≤–µ—Ç:[/blue] {answer}")

                except Exception as e:
                    console.print(f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}[/red]")

        else:
            # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            if not query:
                console.print("[red]–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –∑–∞–ø—Ä–æ—Å[/red]")
                return

            user_query = " ".join(query)

            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", total=None)

                if stream:
                    progress.stop()
                    console.print(f"[cyan]–ó–∞–ø—Ä–æ—Å:[/cyan] {user_query}")
                    console.print("[blue]–û—Ç–≤–µ—Ç:[/blue]")
                    for chunk in rag_engine.stream_query(user_query):
                        console.print(chunk, end="")
                    console.print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                else:
                    answer = rag_engine.query(user_query)
                    progress.stop()

                    console.print(f"[cyan]–ó–∞–ø—Ä–æ—Å:[/cyan] {user_query}")
                    console.print(f"[blue]–û—Ç–≤–µ—Ç:[/blue] {answer}")

    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        if ctx.obj['verbose']:
            console.print_exception()


@cli.command()
@click.pass_context
def stats(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG —Å–∏—Å—Ç–µ–º—ã"""
    try:
        settings = Settings()
        rag_engine = RAGEngine(settings)

        stats = rag_engine.get_stats()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        table = Table(title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan", no_wrap=True)
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="dim")

        table.add_row(
            "–î–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            str(stats.get('documents', 0)),
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        )
        table.add_row(
            "–ß–∞–Ω–∫–æ–≤",
            str(stats.get('chunks', 0)),
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤"
        )
        table.add_row(
            "–†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞",
            str(stats.get('vector_store_size', 0)),
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
        )
        table.add_row(
            "–¢–∏–ø –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞",
            settings.vector_store_type,
            "–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–µ–∫—Ç–æ—Ä–æ–≤"
        )
        table.add_row(
            "–ú–æ–¥–µ–ª—å LLM",
            settings.llm_model,
            "–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å"
        )
        table.add_row(
            "–¢–∏–ø —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤",
            settings.embedding_type,
            "–ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"
        )

        console.print(table)

    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        if ctx.obj['verbose']:
            console.print_exception()


@cli.command()
@click.option('--confirm', is_flag=True, help='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞')
@click.pass_context
def clear(ctx, confirm):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if not confirm:
            if not Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã?"):
                console.print("[yellow]–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞[/yellow]")
                return

        settings = Settings()
        rag_engine = RAGEngine(settings)

        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("–û—á–∏—Å—Ç–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã...", total=None)
            rag_engine.clear_knowledge_base()
            progress.stop()

        console.print("[green]‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞[/green]")

    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        if ctx.obj['verbose']:
            console.print_exception()


@cli.command()
@click.pass_context
def config(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        settings = Settings()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        table = Table(title="‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã")
        table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan", no_wrap=True)
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
        table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="dim")

        config_items = [
            ("LLM –º–æ–¥–µ–ª—å", settings.llm_model, "–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å"),
            ("API –∫–ª—é—á DeepSeek", "***" + settings.deepseek_api_key[-4:] if settings.deepseek_api_key else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "API –∫–ª—é—á –¥–ª—è DeepSeek"),
            ("–¢–∏–ø —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", settings.embedding_type, "–ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"),
            ("–¢–∏–ø –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", settings.vector_store_type, "–•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–µ–∫—Ç–æ—Ä–æ–≤"),
            ("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏", settings.collection_name, "–ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"),
            ("–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞", str(settings.chunk_size), "–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞"),
            ("–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —á–∞–Ω–∫–æ–≤", str(settings.chunk_overlap), "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", str(settings.retrieval_k), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
            ("–ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏", str(settings.similarity_threshold), "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏"),
            ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", str(settings.temperature), "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"),
            ("–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤", str(settings.max_tokens) if settings.max_tokens else "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤"),
            ("–ü–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥", "–í–∫–ª—é—á–µ–Ω" if settings.use_streaming else "–û—Ç–∫–ª—é—á–µ–Ω", "–ü–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–æ–≤"),
            ("–ü–∞–º—è—Ç—å", "–í–∫–ª—é—á–µ–Ω–∞" if settings.enable_memory else "–û—Ç–∫–ª—é—á–µ–Ω–∞", "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å"),
            ("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", settings.log_level, "–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤"),
        ]

        for param, value, description in config_items:
            table.add_row(param, str(value), description)

        console.print(table)

    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        if ctx.obj['verbose']:
            console.print_exception()


if __name__ == '__main__':
    cli()
