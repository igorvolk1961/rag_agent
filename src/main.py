"""
Main entry point for RAG Agent with interactive menu
"""

import sys
import os
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent))

from config.settings import Settings
from core.rag_engine import RAGEngine
from core.document_processor import DocumentProcessor
from utils.logging_utils import setup_logging


def clear_screen():
    """Clear the terminal screen"""
    os.system('cls' if os.name == 'nt' else 'clear')


def show_menu():
    """Display the main menu"""
    print("=" * 60)
    print("ü§ñ RAG AGENT - –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤")
    print("=" * 60)
    print("1. üìÑ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    print("2. ‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    print("3. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("4. ‚öôÔ∏è  –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    print("5. üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
    print("6. üîÑ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    print("7. ‚ùå –í—ã—Ö–æ–¥")
    print("=" * 60)


def add_documents_menu(rag_engine, document_processor):
    """Menu for adding documents"""
    print("\nüìÑ –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("-" * 30)

    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏")
        print("3. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å SmartChunker (–∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —á–∞–Ω–∫–∏–Ω–≥)")
        print("4. –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ —Å SmartChunker")
        print("5. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-5): ").strip()

        if choice == "1":
            file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ").strip()
            if file_path and Path(file_path).exists():
                try:
                    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
                    chunks_count = rag_engine.add_documents([Path(file_path)])
                    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –°–æ–∑–¥–∞–Ω–æ {chunks_count} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        elif choice == "2":
            folder_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ: ").strip()
            if folder_path and Path(folder_path).exists():
                try:
                    print("–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
                    folder = Path(folder_path)
                    files = []
                    for file_path in folder.glob("*"):
                        if file_path.is_file() and document_processor.is_supported_file(str(file_path)):
                            files.append(file_path)

                    if files:
                        print(f"–ù–∞–π–¥–µ–Ω–æ {len(files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞...")
                        chunks_count = rag_engine.add_documents(files)
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤! –°–æ–∑–¥–∞–Ω–æ {chunks_count} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.")
                    else:
                        print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ.")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

        elif choice == "3":
            # –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å SmartChunker
            file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ").strip()
            if file_path and Path(file_path).exists():
                try:
                    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å SmartChunker...")
                    chunks_count = rag_engine.add_documents_with_smart_chunker([Path(file_path)])
                    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–º —á–∞–Ω–∫–∏–Ω–≥–æ–º! –°–æ–∑–¥–∞–Ω–æ {chunks_count} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        elif choice == "4":
            # –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ —Å SmartChunker
            folder_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ: ").strip()
            if folder_path and Path(folder_path).exists():
                try:
                    print("–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
                    folder = Path(folder_path)
                    files = []
                    for ext in document_processor.get_supported_extensions():
                        files.extend(folder.glob(f"*{ext}"))

                    if files:
                        print(f"–ù–∞–π–¥–µ–Ω–æ {len(files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å SmartChunker...")
                        chunks_count = rag_engine.add_documents_with_smart_chunker(files)
                        print(f"‚úÖ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–º —á–∞–Ω–∫–∏–Ω–≥–æ–º! –°–æ–∑–¥–∞–Ω–æ {chunks_count} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.")
                    else:
                        print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ.")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

        elif choice == "5":
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")


def query_menu(rag_engine):
    """Menu for querying the system"""
    print("\n‚ùì –ó–ê–ü–†–û–° –ö –°–ò–°–¢–ï–ú–ï")
    print("-" * 25)

    while True:
        query = input("\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ '–Ω–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞): ").strip()

        if query.lower() in ['–Ω–∞–∑–∞–¥', 'back', 'exit']:
            break

        if not query:
            continue

        try:
            print("\nü§î –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
            response = rag_engine.query(query)
            print(f"\nüí° –û—Ç–≤–µ—Ç: {response.answer}")

            if response.sources:
                print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(response.sources)}):")
                for i, source in enumerate(response.sources, 1):
                    print(f"  {i}. {source.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def interactive_mode(rag_engine):
    """Interactive chat mode"""
    print("\nüîÑ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
    print("-" * 30)
    print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    print("-" * 30)

    while True:
        query = input("\nüë§ –í—ã: ").strip()

        if query.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        if not query:
            continue

        try:
            print("ü§ñ RAG Agent: ", end="", flush=True)
            for chunk in rag_engine.stream_query(query):
                print(chunk, end="", flush=True)
            print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def show_stats(rag_engine):
    """Show system statistics"""
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    print("-" * 25)

    try:
        stats = rag_engine.get_stats()

        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats.get('total_documents', 0)}")
        print(f"üìù –§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {stats.get('total_chunks', 0)}")
        print(f"ü§ñ LLM –º–æ–¥–µ–ª—å: {stats.get('llm_model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"üî§ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {stats.get('embedding_model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"üóÑÔ∏è –¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {stats.get('vector_store_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"üìè –†–∞–∑–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {stats.get('chunk_size', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"üîÑ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {stats.get('chunk_overlap', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def show_config():
    """Show system configuration"""
    print("\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´")
    print("-" * 30)

    try:
        settings = Settings()

        print(f"ü§ñ LLM –º–æ–¥–µ–ª—å: {settings.llm_model}")
        print(f"üîë API –∫–ª—é—á: {'***' + settings.deepseek_api_key[-4:] if settings.deepseek_api_key else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"üî§ –¢–∏–ø —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {settings.embedding_type}")
        print(f"üóÑÔ∏è –¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {settings.vector_store_type}")
        print(f"üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {settings.collection_name}")
        print(f"üìè –†–∞–∑–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {settings.chunk_size}")
        print(f"üîÑ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {settings.chunk_overlap}")
        print(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {settings.retrieval_k}")
        print(f"üìä –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: {settings.similarity_threshold}")
        print(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {settings.temperature}")
        print(f"üìù –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {settings.max_tokens or '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}")
        print(f"üì° –ü–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥: {'–í–∫–ª—é—á–µ–Ω' if settings.use_streaming else '–û—Ç–∫–ª—é—á–µ–Ω'}")
        print(f"üß† –ü–∞–º—è—Ç—å: {'–í–∫–ª—é—á–µ–Ω–∞' if settings.enable_memory else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        print(f"üìã –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤: {settings.log_level}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def clear_knowledge_base(rag_engine):
    """Clear the knowledge base"""
    print("\nüóëÔ∏è –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
    print("-" * 30)

    confirm = input("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã? (–¥–∞/–Ω–µ—Ç): ").strip().lower()

    if confirm in ['–¥–∞', 'yes', 'y']:
        try:
            rag_engine.clear_knowledge_base()
            print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


def main():
    """Main function with interactive menu"""
    try:
        # Setup logging
        setup_logging()

        # Load configuration
        settings = Settings()

        # Initialize components
        rag_engine = RAGEngine(settings)
        document_processor = DocumentProcessor(
            chunk_size=settings.chunk_size,
            chunk_overlap=settings.chunk_overlap,
            use_smart_chunker=getattr(settings, 'use_smart_chunker', False),
            smart_chunker_config=getattr(settings, 'smart_chunker_config_path', None)
        )

        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

        while True:
            clear_screen()
            show_menu()

            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-7): ").strip()

            if choice == "1":
                add_documents_menu(rag_engine, document_processor)
            elif choice == "2":
                query_menu(rag_engine)
            elif choice == "3":
                show_stats(rag_engine)
            elif choice == "4":
                show_config()
            elif choice == "5":
                clear_knowledge_base(rag_engine)
            elif choice == "6":
                interactive_mode(rag_engine)
            elif choice == "7":
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                input()

    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
