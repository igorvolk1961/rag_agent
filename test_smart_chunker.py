#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SmartChunker
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from modules.parser.smart_chunker_adapter import SmartChunkerAdapter

def test_smart_chunker():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º SmartChunker"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SmartChunker...")

    try:
        print("–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SmartChunkerAdapter...")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        adapter = SmartChunkerAdapter("smart_chunker_config.json")
        print("‚úÖ SmartChunkerAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if not adapter.is_available():
            print("‚ùå SmartChunker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        print("‚úÖ SmartChunker –¥–æ—Å—Ç—É–ø–µ–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        test_file = "data/input/–ü–ª–∞–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –º–æ—Å—Ç–∞.docx"
        if Path(test_file).exists():
            print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {test_file}")

            document = adapter.process_document(test_file)
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   - –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(document.chunks)}")
            print(f"   - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {document.metadata}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤
            for i, chunk in enumerate(document.chunks[:3]):
                print(f"   –ß–∞–Ω–∫ {i+1}:")
                print(f"     - –†–∞–∑–º–µ—Ä: {len(chunk.content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"     - –°–µ–∫—Ü–∏—è: {chunk.metadata.get('section_number', 'N/A')}")
                print(f"     - –£—Ä–æ–≤–µ–Ω—å: {chunk.metadata.get('level', 'N/A')}")
                print(f"     - –ù–∞—á–∞–ª–æ: {chunk.content[:100]}...")
                print()

            return True
        else:
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_smart_chunker()
    if success:
        print("üéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("üí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª!")
        sys.exit(1)
